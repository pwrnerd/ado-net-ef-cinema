//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde von einer Vorlage generiert.
//
//     Manuelle Änderungen an dieser Datei führen möglicherweise zu unerwartetem Verhalten der Anwendung.
//     Manuelle Änderungen an dieser Datei werden überschrieben, wenn der Code neu generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAO
{
    using System;using System.ComponentModel;
    using System.Collections.Generic;
    
    public partial class Saal : INotifyPropertyChanged
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Saal()
        {
            this.Vorfuehrung = new HashSet<Vorfuehrung>();
        }
    
        private System.Guid _ID; public System.Guid ID { get{ return _ID;} set{ if (_ID != value){ _ID = value; OnPropertyChanged("ID");} } }
        private string _Bezeichnung; public string Bezeichnung { get{ return _Bezeichnung;} set{ if (_Bezeichnung != value){ _Bezeichnung = value; OnPropertyChanged("Bezeichnung");} } }
        private long _AnzahlPlaetze; public long AnzahlPlaetze { get{ return _AnzahlPlaetze;} set{ if (_AnzahlPlaetze != value){ _AnzahlPlaetze = value; OnPropertyChanged("AnzahlPlaetze");} } }
        private bool _Dreidimensional; public bool Dreidimensional { get{ return _Dreidimensional;} set{ if (_Dreidimensional != value){ _Dreidimensional = value; OnPropertyChanged("Dreidimensional");} } }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Vorfuehrung> Vorfuehrung { get; set; }
    
        #region INotifyPropertyChanged Members
        public event PropertyChangedEventHandler PropertyChanged;
    
        protected void OnPropertyChanged(string propertyName)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }
    
        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, e);
        }
        #endregion
    
    }
}
